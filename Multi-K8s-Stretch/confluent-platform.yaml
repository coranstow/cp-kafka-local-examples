#Service for the internal and external nodes
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-0
  namespace: confluent
spec:
  #type: LoadBalancer
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: client
      protocol: TCP
      port: 2181
      targetPort: 2181
      #NodePort: 32181
    - name: secureclient
      protocol: TCP
      port: 2182
      targetPort: 2182
      #NodePort: 32181
    - name: serverport
      protocol: TCP
      port: 2888
      targetPort: 2888
      #NodePort: 32888
    - name: leaderelectionport
      protocol: TCP
      port: 3888
      targetPort: 3888
      #NodePort: 3888
  selector:
    #app: cp-zookeeper
    release: confluent
    statefulset.kubernetes.io/pod-name: confluent-cp-zookeeper-0
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-1
  namespace: confluent
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: client
      protocol: TCP
      port: 2181
      targetPort: 2181
      #NodePort: 32182
    - name: serverport
      protocol: TCP
      port: 2888
      targetPort: 2888
      #NodePort: 32889
    - name: leaderelectionport
      protocol: TCP
      port: 3888
      targetPort: 3888
      #NodePort: 33889
  selector:
    #app: cp-zookeeper
    release: confluent
    statefulset.kubernetes.io/pod-name: confluent-cp-zookeeper-1
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-2
  namespace: confluent
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: client
      protocol: TCP
      port: 2181
      targetPort: 2181
      #NodePort: 32183
    - name: serverport
      protocol: TCP
      port: 2888
      targetPort: 2888
      #NodePort: 32890
    - name: leaderelectionport
      protocol: TCP
      port: 3888
      targetPort: 3888
      #NodePort: 33890
  selector:
    #app: cp-zookeeper
    release: confluent
    statefulset.kubernetes.io/pod-name: confluent-cp-zookeeper-2
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-3
  namespace: confluent
spec:
  type: ExternalName
  externalName: zookeeper-3.confluent
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-4
  namespace: confluent
spec:
  type: ExternalName
  externalName: zookeeper-4.confluent
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-5
  namespace: confluent
spec:
  type: ExternalName
  externalName: zookeeper-5.confluent

### Below are template-generated configs that have been customised
---
# Source: cp-helm-charts/charts/cp-zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: confluent-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: confluent
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cp-zookeeper
      release: confluent
  serviceName: confluent-cp-zookeeper-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-zookeeper
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-zookeeper
                  - key: "release"
                    operator: In
                    values:
                    - confluent
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: pem-to-keystore
        image: "confluentinc/cp-zookeeper:6.1.0"
        env:
        - name: rootca
          value: /etc/ssl/certs/confluent/cp-RootCA.pem
        - name: truststore_jks
          value: /var/run/secrets/confluent.io/keystores/truststore.jks
        - name: keystore_jks
          value: /var/run/secrets/confluent.io/keystores/keystore.jks
        - name: quorum_keystore_jks
          value: /var/run/secrets/confluent.io/keystores/keystore.quorum.jks
        - name: keystorepass
          value: keystorepass
        - name: truststorepass
          value: truststorepass
        command:
        - "bash"
        - "-c"
        - |
          export SERVER_CERT=/etc/ssl/certs/confluent/zookeeper-${HOSTNAME##*-}.crt.pem ;
          export SERVER_KEY=/etc/ssl/certs/confluent/zookeeper-${HOSTNAME##*-}.key.pem ;
          export SERVER_QUORUM_CERT=/etc/ssl/certs/confluent/zookeeper-${HOSTNAME##*-}.quorum.crt.pem ;
          export SERVER_QUORUM_KEY=/etc/ssl/certs/confluent/zookeeper-${HOSTNAME##*-}.quorum.key.pem ;
          cat $SERVER_CERT $rootca > /tmp/fullchain.pem ;
          cat $SERVER_QUORUM_CERT $rootca > /tmp/fullchain.quorum.pem ;
          openssl pkcs12 -export -in /tmp/fullchain.pem -inkey $SERVER_KEY -name ${HOSTNAME} -out /tmp/server.p12 -password pass:$keystorepass ;
          keytool -importkeystore -srckeystore /tmp/server.p12 -destkeystore $keystore_jks -srcstoretype pkcs12 -alias ${HOSTNAME} -storepass $keystorepass -keypass $keystorepass -srcstorepass $keystorepass ;
          openssl pkcs12 -export -in /tmp/fullchain.quorum.pem -inkey $SERVER_QUORUM_KEY -name ${HOSTNAME} -out /tmp/server.quorum.p12 -password pass:$keystorepass ;
          keytool -importkeystore -srckeystore /tmp/server.quorum.p12 -destkeystore $quorum_keystore_jks -srcstoretype pkcs12 -alias ${HOSTNAME} -storepass $keystorepass -keypass $keystorepass -srcstorepass $keystorepass ;
          keytool -noprompt -keystore $truststore_jks -alias CARoot -importcert -file $rootca -storepass $truststorepass -keypass $truststorepass ;
        volumeMounts:
        - name: confluent-platform-certificates
          mountPath: /etc/ssl/certs/confluent
        - name: keystore-volume
          mountPath: /var/run/secrets/confluent.io/keystores
      containers:
      - name: prometheus-jmx-exporter
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
        imagePullPolicy: "IfNotPresent"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-zookeeper/jmx-zookeeper-prometheus.yml
        ports:
        - containerPort: 5556
        resources:
          {}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-zookeeper
      - name: cp-zookeeper-server
        image: "confluentinc/cp-zookeeper:6.1.0"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        - containerPort: 5555
          name: jmx
        resources:
          {}
        env:
        - name : KAFKA_HEAP_OPTS
          value: "-Xms512M -Xmx512M"
        - name : KAFKA_JMX_PORT
          value: "5555"
        - name : ZOOKEEPER_TICK_TIME
          value: "2000"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2180"
        - name : ZOOKEEPER_SERVERS
          value: "confluent-cp-zookeeper-0.confluent-cp-zookeeper-headless.confluent:2888:3888;confluent-cp-zookeeper-1.confluent-cp-zookeeper-headless.confluent:2888:3888;confluent-cp-zookeeper-2.confluent-cp-zookeeper-headless.confluent:2888:3888"
#          value: "confluent-cp-zookeeper-0.confluent-cp-zookeeper-headless.confluent:2888:3888;confluent-cp-zookeeper-1.confluent-cp-zookeeper-headless.confluent:2888:3888;confluent-cp-zookeeper-2.confluent-cp-zookeeper-headless.confluent:2888:3888"
        # ZOOKEEPER_SERVER_ID is required just to pass cp-zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ## New settings for ssl
#        - name: truststore_jks
#          value: /var/run/secrets/confluent.io/keystores/truststore.jks
#        - name: keystore_jks
#          value: /var/run/secrets/confluent.io/keystores/keystore.jks
#        - name: keystorepass
#          value: keystorepass
#        - name: truststorepass
#          value: truststorepass
        - name: ZOOKEEPER_SSL_CLIENT_AUTH
          value: "none"
        - name: ZOOKEEPER_SECURE_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_SERVER_CNXN_FACTORY
          value: "org.apache.zookeeper.server.NettyServerCnxnFactory"
        - name: "ZOOKEEPER_AUTH_PROVIDER_X509"
          value: "org.apache.zookeeper.server.auth.X509AuthenticationProvider"
        - name: ZOOKEEPER_SSL_KEYSTORE_LOCATION
          value: /var/run/secrets/confluent.io/keystores/keystore.jks
        - name: ZOOKEEPER_SSL_KEYSTORE_PASSWORD
          value: keystorepass
#        - name: ZOOKEEPER_SSL_KEYSTORE_TYPE
#          value:
        - name: ZOOKEEPER_SSL_TRUSTSTORE_LOCATION
          value: /var/run/secrets/confluent.io/keystores/truststore.jks
        - name: ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
          value: truststorepass
#        - name: ZOOKEEPER_SSL_KEYSTORE_TYPE
#          value:
        - name: ZOOKEEPER_SSL_QUORUM
          value: "true"
        - name: ZOOKEEPER_SSL_QUORUM_CLIENT_AUTH
          value: "true"
        - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_LOCATION
          value: /var/run/secrets/confluent.io/keystores/keystore.quorum.jks
        - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_PASSWORD
          value: keystorepass
#        - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_TYPE
#          value:
        - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_LOCATION
          value: /var/run/secrets/confluent.io/keystores/truststore.jks
        - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_PASSWORD
          value: truststorepass
#        - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_TYPE
#          value:
        command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        volumeMounts:
        - name: confluent-platform-certificates
          mountPath: /etc/ssl/certs/confluent/
        - name: keystore-volume
          mountPath: /var/run/secrets/confluent.io/keystores
        - name: datadir
          mountPath: /var/lib/zookeeper/data
        - name: datalogdir
          mountPath: /var/lib/zookeeper/log
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-zookeeper-jmx-configmap
      - name: keystore-volume
        emptyDir:
          medium: Memory
      - name: confluent-platform-certificates
        configMap:
          name: confluent-platform-certificates
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "10Gi"
  - metadata:
      name: datalogdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "10Gi"

### Below here are the untouchd Helm Template-generated configs
---
# Source: cp-helm-charts/charts/cp-zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: confluent-cp-zookeeper-pdb
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: confluent
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cp-zookeeper
      release: confluent
  maxUnavailable: 1
---
# Source: cp-helm-charts/charts/cp-kafka-connect/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-kafka-connect-jmx-configmap
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-kafka-connect-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.connect:type=connect-worker-metrics
    - kafka.connect:type=connect-metrics,client-id=*
    - kafka.connect:type=connector-task-metrics,connector=*,task=*
    rules:
    - pattern : "kafka.connect<type=connect-worker-metrics>([^:]+):"
      name: "cp_kafka_connect_connect_worker_metrics_$1"
    - pattern : "kafka.connect<type=connect-metrics, client-id=([^:]+)><>([^:]+)"
      name: "cp_kafka_connect_connect_metrics_$1_$2"
    - pattern : "kafka.connect<type=connector-task-metrics, connector=([^:]+), task=([^:]+)><>status: ([^:]+)"
      name: "cp_kafka_connect_connect_connector_metrics"
      value: 1
      labels:
        connector: $1
        task: $2
        status: $3
---
# Source: cp-helm-charts/charts/cp-kafka-rest/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-kafka-rest-jmx-configmap
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-kafka-rest-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.rest:type=jetty-metrics
    - kafka.rest:type=jersey-metrics
    rules:
    - pattern : 'kafka.rest<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_rest_jetty_metrics_$1"
    - pattern : 'kafka.rest<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_rest_jersey_metrics_$1"
---
# Source: cp-helm-charts/charts/cp-kafka/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-kafka-jmx-configmap
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-kafka-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.server:type=ReplicaManager,name=*
    - kafka.controller:type=KafkaController,name=*
    - kafka.server:type=BrokerTopicMetrics,name=*
    - kafka.network:type=RequestMetrics,name=RequestsPerSec,request=*
    - kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent
    - kafka.server:type=ReplicaFetcherManager,name=MaxLag,clientId=*
    - kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent
    - kafka.controller:type=ControllerStats,name=*
    - kafka.server:type=SessionExpireListener,name=*
    rules:
    - pattern : kafka.server<type=ReplicaManager, name=(.+)><>(Value|OneMinuteRate)
      name: "cp_kafka_server_replicamanager_$1"
    - pattern : kafka.controller<type=KafkaController, name=(.+)><>Value
      name: "cp_kafka_controller_kafkacontroller_$1"
    - pattern : kafka.server<type=BrokerTopicMetrics, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_brokertopicmetrics_$1"
    - pattern : kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+)><>OneMinuteRate
      name: "cp_kafka_network_requestmetrics_requestspersec_$1"
    - pattern : kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>Value
      name: "cp_kafka_network_socketserver_networkprocessoravgidlepercent"
    - pattern : kafka.server<type=ReplicaFetcherManager, name=MaxLag, clientId=(.+)><>Value
      name: "cp_kafka_server_replicafetchermanager_maxlag_$1"
    - pattern : kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
      name: "cp_kafka_kafkarequesthandlerpool_requesthandleravgidlepercent"
    - pattern : kafka.controller<type=ControllerStats, name=(.+)><>OneMinuteRate
      name: "cp_kafka_controller_controllerstats_$1"
    - pattern : kafka.server<type=SessionExpireListener, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_sessionexpirelistener_$1"
---
# Source: cp-helm-charts/charts/cp-ksql-server/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-ksql-server-jmx-configmap
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-ksql-server-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - io.confluent.ksql.metrics:type=ksql-engine-query-stats
    rules:
    - pattern : 'io.confluent.ksql.metrics<type=ksql-engine-query-stats>([^:]+):'
      name: "cp_ksql_server_metrics_$1"
---
# Source: cp-helm-charts/charts/cp-ksql-server/templates/ksql-queries-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-ksql-server-ksql-queries-configmap
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: confluent
    heritage: Helm
data:
  queries.sql: |-
    -- From http://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#create-a-stream-and-table

    -- Create a stream pageviews_original from the Kafka topic pageviews, specifying the value_format of DELIMITED
    CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic='pageviews', value_format='DELIMITED');

    -- Create a table users_original from the Kafka topic users, specifying the value_format of JSON
    CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR) WITH (kafka_topic='users', value_format='JSON', key = 'userid');

    -- Create a persistent query by using the CREATE STREAM keywords to precede the SELECT statement
    CREATE STREAM pageviews_enriched AS SELECT users_original.userid AS userid, pageid, regionid, gender FROM pageviews_original LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;

    -- Create a new persistent query where a condition limits the streams content, using WHERE
    CREATE STREAM pageviews_female AS SELECT * FROM pageviews_enriched WHERE gender = 'FEMALE';

    -- Create a new persistent query where another condition is met, using LIKE
    CREATE STREAM pageviews_female_like_89 WITH (kafka_topic='pageviews_enriched_r8_r9') AS SELECT * FROM pageviews_female WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';

    -- Create a new persistent query that counts the pageviews for each region and gender combination in a tumbling window of 30 seconds when the count is greater than one
    CREATE TABLE pageviews_regions WITH (VALUE_FORMAT='avro') AS SELECT gender, regionid , COUNT(*) AS numusers FROM pageviews_enriched WINDOW TUMBLING (size 30 second) GROUP BY gender, regionid HAVING COUNT(*) > 1;
---
# Source: cp-helm-charts/charts/cp-schema-registry/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-schema-registry-jmx-configmap
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-schema-registry-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - kafka.schema.registry:type=jetty-metrics
    - kafka.schema.registry:type=master-slave-role
    - kafka.schema.registry:type=jersey-metrics
    rules:
    - pattern : 'kafka.schema.registry<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jetty_metrics_$1"
    - pattern : 'kafka.schema.registry<type=master-slave-role>([^:]+):'
      name: "cp_kafka_schema_registry_master_slave_role"
    - pattern : 'kafka.schema.registry<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jersey_metrics_$1"
---
# Source: cp-helm-charts/charts/cp-zookeeper/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluent-cp-zookeeper-jmx-configmap
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: confluent
    heritage: Helm
data:
  jmx-zookeeper-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    whitelistObjectNames:
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*,name2=*
    - org.apache.ZooKeeperService:name0=ReplicatedServer_id*,name1=replica.*,name2=*,name3=*
    rules:
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "cp_zookeeper_$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
      name: "cp_zookeeper_$3"
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
      name: "cp_zookeeper_$4"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "cp_zookeeper_$4_$5"
      labels:
        replicaId: "$2"
        memberType: "$3"
---
# Source: cp-helm-charts/charts/cp-control-center/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-control-center
  labels:
    app: cp-control-center
    chart: cp-control-center-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - name: cc-http
      port: 9021
  selector:
    app: cp-control-center
    release: confluent
---
# Source: cp-helm-charts/charts/cp-kafka-connect/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-kafka-connect
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - name: kafka-connect
      port: 8083
    - name: metrics
      port: 5556
  selector:
    app: cp-kafka-connect
    release: confluent
---
# Source: cp-helm-charts/charts/cp-kafka-rest/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-kafka-rest
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - name: rest-proxy
      port: 8082
    - name: metrics
      port: 5556
  selector:
    app: cp-kafka-rest
    release: confluent
---
# Source: cp-helm-charts/charts/cp-kafka/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-kafka-headless
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: cp-kafka
    release: confluent
---
# Source: cp-helm-charts/charts/cp-kafka/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - port: 9092
      name: broker
    - port: 5556
      name: metrics
  selector:
    app: cp-kafka
    release: confluent
---
# Source: cp-helm-charts/charts/cp-ksql-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-ksql-server
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
      - name: ksql-server
        port: 8088
      - name: metrics
        port: 5556
  selector:
    app: cp-ksql-server
    release: confluent
---
# Source: cp-helm-charts/charts/cp-schema-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-schema-registry
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - name: schema-registry
      port: 8081
    - name: metrics
      port: 5556
  selector:
    app: cp-schema-registry
    release: confluent
---
# Source: cp-helm-charts/charts/cp-zookeeper/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-zookeeper-headless
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: confluent
    heritage: Helm
spec:
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  clusterIP: None
  selector:
    app: cp-zookeeper
    release: confluent
---
# Source: cp-helm-charts/charts/cp-zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluent-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: confluent
    heritage: Helm
spec:
  type:
  ports:
    - port: 2181
      name: client
    - name: metrics
      port: 5556
  selector:
    app: cp-zookeeper
    release: confluent
---
# Source: cp-helm-charts/charts/cp-control-center/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluent-cp-control-center
  labels:
    app: cp-control-center
    chart: cp-control-center-0.1.0
    release: confluent
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-control-center
      release: confluent
  template:
    metadata:
      labels:
        app: cp-control-center
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: cp-control-center
          image: "confluentinc/cp-enterprise-control-center:6.1.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: cc-http
              containerPort: 9021
              protocol: TCP
          resources:
            {}
          env:
            - name: CONTROL_CENTER_BOOTSTRAP_SERVERS
              value: PLAINTEXT://confluent-cp-kafka-headless:9092
            - name: CONTROL_CENTER_ZOOKEEPER_CONNECT
              value:
            - name: CONTROL_CENTER_CONNECT_CLUSTER
              value: http://confluent-cp-kafka-connect:8083
            - name: CONTROL_CENTER_KSQL_URL
              value: http://confluent-cp-ksql-server:8088
            - name: CONTROL_CENTER_KSQL_ADVERTISED_URL
              value: http://confluent-cp-ksql-server:8088
            - name: CONTROL_CENTER_SCHEMA_REGISTRY_URL
              value: http://confluent-cp-schema-registry:8081
            - name: KAFKA_HEAP_OPTS
              value: "-Xms512M -Xmx512M"
            - name: "CONTROL_CENTER_REPLICATION_FACTOR"
              value: "3"
---
# Source: cp-helm-charts/charts/cp-kafka-connect/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluent-cp-kafka-connect
  labels:
    app: cp-kafka-connect
    chart: cp-kafka-connect-0.1.0
    release: confluent
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-connect
      release: confluent
  template:
    metadata:
      labels:
        app: cp-kafka-connect
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-connect
        - name: cp-kafka-connect-server
          image: "confluentinc/cp-kafka-connect:6.1.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: kafka-connect
              containerPort: 8083
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          env:
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: PLAINTEXT://confluent-cp-kafka-headless:9092
            - name: CONNECT_GROUP_ID
              value: confluent
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: confluent-cp-kafka-connect-config
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: confluent-cp-kafka-connect-offset
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: confluent-cp-kafka-connect-status
            - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
              value: http://confluent-cp-schema-registry:8081
            - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
              value: http://confluent-cp-schema-registry:8081
            - name: KAFKA_HEAP_OPTS
              value: "-Xms512M -Xmx512M"
            - name: "CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR"
              value: "3"
            - name: "CONNECT_INTERNAL_KEY_CONVERTER"
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: "CONNECT_INTERNAL_VALUE_CONVERTER"
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: "CONNECT_KEY_CONVERTER"
              value: "io.confluent.connect.avro.AvroConverter"
            - name: "CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE"
              value: "false"
            - name: "CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR"
              value: "3"
            - name: "CONNECT_PLUGIN_PATH"
              value: "/usr/share/java,/usr/share/confluent-hub-components"
            - name: "CONNECT_STATUS_STORAGE_REPLICATION_FACTOR"
              value: "3"
            - name: "CONNECT_VALUE_CONVERTER"
              value: "io.confluent.connect.avro.AvroConverter"
            - name: "CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE"
              value: "false"
            - name: KAFKA_JMX_PORT
              value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-kafka-connect-jmx-configmap
---
# Source: cp-helm-charts/charts/cp-kafka-rest/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluent-cp-kafka-rest
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    release: confluent
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-rest
      release: confluent
  template:
    metadata:
      labels:
        app: cp-kafka-rest
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-rest
        - name: cp-kafka-rest-server
          image: "confluentinc/cp-kafka-rest:6.1.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: rest-proxy
              containerPort: 8082
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          env:
          - name: KAFKA_REST_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KAFKA_REST_BOOTSTRAP_SERVERS
            value: PLAINTEXT://confluent-cp-kafka-headless:9092
          - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            value: http://confluent-cp-schema-registry:8081
          - name: KAFKAREST_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          - name: JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-kafka-rest-jmx-configmap
---
# Source: cp-helm-charts/charts/cp-ksql-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluent-cp-ksql-server
  labels:
    app: cp-ksql-server
    chart: cp-ksql-server-0.1.0
    release: confluent
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-ksql-server
      release: confluent
  template:
    metadata:
      labels:
        app: cp-ksql-server
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-ksql-server
        - name: cp-ksql-server
          image: "confluentinc/cp-ksqldb-server:6.1.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: server
              containerPort: 8088
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          volumeMounts:
          env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: PLAINTEXT://confluent-cp-kafka-headless:9092
          - name: KSQL_KSQL_SERVICE_ID
            value: confluent
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: http://confluent-cp-schema-registry:8081
          - name: KSQL_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          - name: JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-ksql-server-jmx-configmap
---
# Source: cp-helm-charts/charts/cp-schema-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluent-cp-schema-registry
  labels:
    app: cp-schema-registry
    chart: cp-schema-registry-0.1.0
    release: confluent
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-schema-registry
      release: confluent
  template:
    metadata:
      labels:
        app: cp-schema-registry
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-schema-registry/jmx-schema-registry-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-schema-registry
        - name: cp-schema-registry-server
          image: "confluentinc/cp-schema-registry:6.1.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: schema-registry
              containerPort: 8081
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          env:
          - name: SCHEMA_REGISTRY_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SCHEMA_REGISTRY_LISTENERS
            value: http://0.0.0.0:8081
          - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
            value: PLAINTEXT://confluent-cp-kafka-headless:9092
          - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
            value: confluent
          - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
            value: "true"
          - name: SCHEMA_REGISTRY_HEAP_OPTS
            value: "-Xms512M -Xmx512M"

          - name: JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-schema-registry-jmx-configmap
---
# Source: cp-helm-charts/charts/cp-kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: confluent-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: confluent
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cp-kafka
      release: confluent
  serviceName: confluent-cp-kafka-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-kafka
        release: confluent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-kafka
                  - key: "release"
                    operator: In
                    values:
                    - confluent
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: prometheus-jmx-exporter
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
        imagePullPolicy: "IfNotPresent"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: 5556
        resources:
          {}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      - name: cp-kafka-broker
        image: "confluentinc/cp-enterprise-kafka:6.1.0"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 5555
          name: jmx
        resources:
          {}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "confluent-cp-zookeeper-headless:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data-0/logs"
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: "PLAINTEXT://confluent-cp-kafka-headless:9092"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.confluent-cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
          - name: datadir-0
            mountPath: /opt/kafka/data-0
      volumes:
      - name: jmx-config
        configMap:
          name: confluent-cp-kafka-jmx-configmap
  volumeClaimTemplates:
  - metadata:
      name: datadir-0
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "5Gi"
---
# Source: cp-helm-charts/charts/cp-kafka/templates/tests/canary-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "confluent-canary"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
  - name: confluent-canary
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    imagePullPolicy: "IfNotPresent"
    command:
    - sh
    - -c
    - |
      # Delete the topic if it exists
      kafka-topics --zookeeper confluent-cp-zookeeper-headless:2181 --topic confluent-cp-kafka-canary-topic --delete --if-exists
      # Create the topic
      kafka-topics --zookeeper confluent-cp-zookeeper-headless:2181 --topic confluent-cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list confluent-cp-kafka:9092 --topic confluent-cp-kafka-canary-topic && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server confluent-cp-kafka-headless:9092 --topic confluent-cp-kafka-canary-topic --from-beginning --max-messages 1 --timeout-ms 30000 | grep "$MESSAGE"
  restartPolicy: Never
